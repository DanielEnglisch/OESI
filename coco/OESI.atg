/**
 * Grammar by Daniel Englisch to generate Parser.java and Scanner.java
 */

$package=org.xeroserver.OESI
import org.xeroserver.OESI.Node.Type;

COMPILER OESI

public Node main = new Node();

//Editor Stuff
public int getErrorCount(){
	return errors.count;
}

public HashMap<Integer,String> getErrorList(){
	return errors.errorList;
}
//--End Editor


CHARACTERS
  letter    = 'A'..'Z' + 'a'..'z'.
  digit     = '0'..'9'.

TOKENS
  ident     = letter { letter | digit }.
  intCon    = ["-"] digit { digit }.
  realCon  = ["-"] digit {digit} '.' {digit} .
  
COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO '\n'
  
IGNORE "\t\r\n"

PRODUCTIONS

OESI					
=								
{
DEFINE	<out Node def>					(. 	main.append(def); .)
|ASSIGN <out Node ass> 					(.  main.append(ass); .)
|"if" CONDITION
}
.

DEFINE <out Node def>
=
"es" "gibt" ident						(.	def = new Node(t.val);	.)
";"
.

ASSIGN	<out Node ass>					(. String name = ""; ass = null; .)
=
ident									(. name = t.val; .)
 "is"
 EXPRESSION <out Node exp>				(. ass = new Node(Type.ASSIGN, new Node(name), exp); .)
 
 ";"
.


EXPRESSION <out Node exp>
=
TERM <out Node trm1>			(. exp = trm1; .)
{
ADDOP <out Type operator>
TERM <out Node trm2>			(. exp = new Node(operator, trm1, trm2); trm1 = exp; .)
}
.

TERM <out Node trm>
=
FACTOR <out Node fac1>			(. trm = fac1; .)
{
MULOP <out Type operator>		
FACTOR <out Node fac2>			(. trm = new Node(operator, fac1, fac2); fac1 = trm; .)
}
.

FACTOR <out Node fac>			(. fac = null; .)
=
intCon							(. fac = new Node(Double.parseDouble(t.val)); .)
|
realCon							(. fac = new Node(Double.parseDouble(t.val)); .)
|
ident							(. fac = new Node(t.val); .)
.

CONDITION
=
CONTERM
{
"||"
CONTERM
}
.

CONTERM
=
CONFAC
{
"&&"
CONFAC
}
.

CONFAC
=
(
EXPRESSION <out Node exp1>
RELOP <out Type operator>
EXPRESSION <out Node exp2>
)
|
(
"!"
"("
CONDITION
")"
)
|
(
"("
CONDITION
")"
)
.

RELOP <out Type operator>	(.	operator = null; .)
=
"=="						(. operator = Type.EQUAL; .)
|
"!="						(. operator = Type.NOTEQUAL; .)
|
">"							(. operator = Type.GREATER; .)
|
"<"							(. operator = Type.LESS; .)
|
">="						(. operator = Type.GREATERTHAN; .)
|
"<="						(. operator = Type.LESSTHAN; .)
.

ADDOP <out Type operator> 		(. operator = null; .)
=
"blus"							(. operator = Type.PLUS; .)
|
"minus"							(. operator = Type.MINUS; .)
.

MULOP <out Type operator> 		(. operator = null; .)
=
"moi"								(. operator = Type.MUL; .)
|
"duach"								(. operator = Type.DIV; .)
.

END OESI.
